import datatypes from "../domain/Order.data" as OrderDomain
import datatypes from "../domain/Common.data" as Common
import technology from "../technology/JavaSpring.technology" as Java
import technology from "../technology/Eureka.technology" as Eureka
import technology from "../technology/Kafka.technology" as Kafka
import technology from "../technology/Protocols.technology" as Protocols

@technology(Java)
@technology(Eureka)
@technology(Kafka)
@technology(Protocols)
@sync(Protocols::_protocols.rest)
@async(Kafka::_protocols.kafka)
@Eureka::_aspects.EnableEurekaClient
public functional microservice org.example.OrderService {
	@endpoints(Protocols::_protocols.rest: "/orders";)
	interface Orders {
		---
		Create order
		@required request Request
		---
		@Java::_aspects.PostMapping
		create(
			sync in request : OrderDomain::API.CreateOrderRequest,
			sync out response : OrderDomain::API.CreateOrderResponse
		);

		---
		Get order
		@required orderId ID of the order to retrieve
		---
		@endpoints(Protocols::_protocols.rest: "/{orderId}";)
		@Java::_aspects.GetMapping
		getOrder(
			@Java::_aspects.PathVariable
			sync in orderId : long,

			@Java::_aspects.ResponseEntity
			sync out response : OrderDomain::API.GetOrderResponse
		);

		@endpoints(Protocols::_protocols.rest: "/{orderId}/cancel";)
		cancel(
			@Java::_aspects.PathVariable
			sync in orderId : long,

			@Java::_aspects.ResponseEntity
			sync out response : OrderDomain::API.CancelOrderResponse,

			@Java::_aspects.HttpNotFound
			sync out fault error : int
		);
	}

	interface OrderEventConsumer {
		@Kafka::_aspects.KafkaListener(group = "ftgo", topic = "ftgoTopic")
		listenCreateMenu(
			async in menuCreated : Common::DomainEvents.RestaurantCreated
		);
	}
}